<?php
namespace HPrArticleQuantityDiscountSlider;

use Shopware\Bundle\AttributeBundle\Service\ConfigurationStruct;
use Shopware\Bundle\AttributeBundle\Service\CrudService;
use Shopware\Bundle\StoreFrontBundle\Service\Core\ContextService;
use Shopware\Bundle\StoreFrontBundle\Service\Core\ListProductService;
use Shopware\Bundle\StoreFrontBundle\Service\Core\PriceCalculationService;
use Shopware\Components\Logger;
use Shopware\Components\Plugin;
use Shopware\Components\Plugin\Context\UninstallContext;
use Shopware\Models\Emotion\Library\Component;

class HPrArticleQuantityDiscountSlider extends Plugin{

    /**
     * @param \Exception $e
     */
    public function logError(\Exception $e){
        try{
            /** @var Logger $logger */
            $logger = Shopware()->Container()->get('pluginlogger');
            if($logger){
                $logger->err($e->getMessage() . ': ' . $e->getTraceAsString());
            }
        }
        catch(\Exception $e){
            //nothing
        }
    }

    public function install(Plugin\Context\InstallContext $context)
    {
        /**
         * https://forum.shopware.com/discussion/51245/einkaufswelt-widget-felder-hinzufuegen
         */

        /** @var Component $element */
        $element = $this->getEmotionComponent('emotion-components-article');
        if ($element != null) {
            $exists = false;
            foreach($element->getFields() as $field){
                if($field->getName() == 'use_quant'){
                    $exists = true;
                }
            }

            if(!$exists){
                $element->createCheckboxField([
                    'name' => 'use_quant',
                    'fieldLabel' => 'Use quantity',
                    'defaultValue' => false
                ]);
            }
        }

        $this->createAttrFields();
    }

    public function uninstall(UninstallContext $context)
    {
        parent::uninstall($context); // TODO: Change the autogenerated stub

        /**
         * https://forum.shopware.com/discussion/51245/einkaufswelt-widget-felder-hinzufuegen
         */

        /** @var Component $element */
        $element = $this->getEmotionComponent('emotion-components-article');
        if ($element != null) {
            $exists = false;
            foreach($element->getFields() as $field){
                if($field->getName() == 'use_quant'){
                    $exists = true;
                }
            }

            if($exists){
                //TODO remove from db via sql
            }
        }

        $this->removeAttrFields();
    }

    private function createAttrFields(){
        try{
            /** @var CrudService $service */
            $service = $this->container->get('shopware_attribute.crud_service');

            $list = $service->getList('s_articles_attributes');

            $emoQuanr = false;

            /** @var ConfigurationStruct $item */
            foreach ($list as $item){
                if($item->getColumnName() == 'exwe_emotion_quantity'){
                    $emoQuanr = true;
                }
            }

            if(!$emoQuanr){
                $service->update('s_articles_attributes', 'exwe_emotion_quantity', 'integer',
                    [
                        'label' => 'Mengenverkauf - Anzahl',
                        'displayInBackend' => true,
                    ]
                );
            }
            Shopware()->Models()->generateAttributeModels(['s_articles_attributes']);
        }
        catch(\Exception $e){
            $this->logError($e);
        }
    }

    private function removeAttrFields(){
        try{
            /** @var CrudService $service */
            $service = $this->container->get('shopware_attribute.crud_service');

            $list = $service->getList('s_articles_attributes');

            $emoQuanr = false;

            /** @var ConfigurationStruct $item */
            foreach ($list as $item){
                if($item->getColumnName() == 'exwe_emotion_quantity'){
                    $emoQuanr = true;
                }
            }

            if($emoQuanr){
                $service->delete('s_articles_attributes', 'exwe_emotion_quantity');
            }
            Shopware()->Models()->generateAttributeModels(['s_articles_attributes']);
        }
        catch(\Exception $e){
            $this->logError($e);
        }
    }

    private function getEmotionComponent($xtype)
    {
        $models = $this->container->get('models');
        $repository = $models->getRepository('Shopware\Models\Emotion\Library\Component');

        $component = $repository->findOneBy([
            'xType' => $xtype,
        ]);

        if (!$component instanceof \Shopware\Models\Emotion\Library\Component) {
            return null;
        }
        return $component;
    }

    public static function getSubscribedEvents()
    {
        return [
            'Enlight_Controller_Action_PostDispatchSecure_Frontend' => 'addTemplateDir',
            'Enlight_Controller_Action_PostDispatchSecure_Widgets' => 'addTemplateDir',
            'Legacy_Struct_Converter_List_Product_Data' => 'calcPrice',
        ];
    }

    public function calcPrice(\Enlight_Event_EventArgs $args){
        try{
            $data = $args->getReturn();
            if($data['exwe_emotion_quantity'] > 0){

                try{
                    /** @var ContextService $contextService */
                    $contextService = Shopware()->Container()->get('shopware_storefront.context_service');
                    //TODO
                    $context = $contextService->createProductContext(Shopware()->Shop()->getId(), Shopware()->Shop()->getCategory()->getId(), Shopware()->Shop()->getCustomerGroup()->getKey());

                    /** @var ListProductService $service */
                    $service = Shopware()->Container()->get('shopware_storefront.list_product_service');
                    $prod = $service->get($data['ordernumber'], $context);
                    $prices = $prod->getPrices();

                    /** @var PriceCalculationService $priceService */
                    $priceService = Shopware()->Container()->get('shopware_storefront.price_calculation_service');
                    $priceService->calculateProduct($prod, $context);
                    $prices = $prod->getPrices();

                    $defaultPrice = $prices[0]->getCalculatedPrice() * $data['exwe_emotion_quantity'];

                    foreach ($prices as $price){
                        if($price->getRule()->getFrom() <= $data['exwe_emotion_quantity']
                            && (intval($price->getRule()->getTo()) == 0 || $price->getRule()->getTo() >= $data['exwe_emotion_quantity'])){
                            //TODO calc percent
                            $data['exwe_price'] = $price->getCalculatedPrice() * $data['exwe_emotion_quantity'];
                            $data['exwe_diff'] = ($data['exwe_price'] - $defaultPrice) . Shopware()->Shop()->getCurrency()->getSymbol();
                            $data['exwe_diff_percent'] = ceil(($data['exwe_price'] - $defaultPrice) / ($defaultPrice / 100)) . '%';
                        }
                    }
                    $data['exwe_symbol'] = Shopware()->Shop()->getCurrency()->getSymbol();

                }
                catch (\Exception $e2){
                    $this->logError($e2);
                }
            }

            $args->setReturn($data);
        }
        catch(\Exception $e){
            $this->logError($e);
        }
    }

    public function addTemplateDir(\Enlight_Controller_ActionEventArgs $args){
        $args->getSubject()->View()->addTemplateDir($this->getPath() . '/Resources/views/');
    }
}
